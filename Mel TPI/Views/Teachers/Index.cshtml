@model IEnumerable<Mel_TPI.Models.Teacher>
@using Mel_TPI.Areas.Identity.Data;
@using Microsoft.AspNetCore.Identity
@inject SignInManager<Mel_TPIUser> SignInManager
@inject UserManager<Mel_TPIUser> UserManager

@{
    ViewData["Title"] = "Teachers";
}

<h1>Teachers</h1>

@if (SignInManager.IsSignedIn(User) && UserManager.GetUserAsync(User).Result.UserName == "admin@aiteesmusicstudio.com")
{
    <p>
        <a style="color: black;" asp-action="Create">Create New</a>
    </p>
}

<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.FirstName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.LastName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Email)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.PhoneNumber)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.FirstName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.LastName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Email)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.PhoneNumber)
            </td>
                @if (SignInManager.IsSignedIn(User) && UserManager.GetUserAsync(User).Result.UserName == "admin@aiteesmusicstudio.com")
                {
                    <td>
                        <a style="color: black;" asp-action="Edit" asp-route-id="@item.TeacherID">Edit</a> |
                        <a style="color: black;" asp-action="Details" asp-route-id="@item.TeacherID">Details</a> |
                        <a style="color: black;" asp-action="Delete" asp-route-id="@item.TeacherID">Delete</a>
                    </td>
                }
        </tr>
}
    </tbody>
</table>
